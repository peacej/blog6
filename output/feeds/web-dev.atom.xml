<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jerry Chi's website - web dev</title><link href="https://jerrychi.com/" rel="alternate"></link><link href="https://jerrychi.com/feeds/web-dev.atom.xml" rel="self"></link><id>https://jerrychi.com/</id><updated>2022-08-17T00:00:00+09:00</updated><subtitle>Jerry Chi&lt;BR&gt;Data Scientist in Tokyo</subtitle><entry><title>Easy Blog Migration From Medium To Your Own Site Using Python</title><link href="https://jerrychi.com/easy-blog-migration-from-medium-to-your-own-site-using-python.html" rel="alternate"></link><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><author><name>Jerry Chi</name></author><id>tag:jerrychi.com,2022-08-17:/easy-blog-migration-from-medium-to-your-own-site-using-python.html</id><summary type="html">&lt;p&gt;·3 min read&lt;/p&gt;
&lt;p&gt;Recently I migrated my existing articles from Medium to my own new website (&lt;a href="https://jerrychi.com"&gt;https://jerrychi.com&lt;/a&gt;) in a &lt;strong&gt;quick, low-code way&lt;/strong&gt;. I wanted to have both blog articles and permanent pages (e.g. “About Me” page) and &lt;strong&gt;high customizability while spending minimal effort and money&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;·3 min read&lt;/p&gt;
&lt;p&gt;Recently I migrated my existing articles from Medium to my own new website (&lt;a href="https://jerrychi.com"&gt;https://jerrychi.com&lt;/a&gt;) in a &lt;strong&gt;quick, low-code way&lt;/strong&gt;. I wanted to have both blog articles and permanent pages (e.g. “About Me” page) and &lt;strong&gt;high customizability while spending minimal effort and money&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can do this too! Here’s how:&lt;/p&gt;
&lt;p&gt;Register a domain name. I used &lt;a href="https://domains.google/"&gt;https://domains.google/&lt;/a&gt; to register &lt;a href="https://jerrychi.com"&gt;jerrychi.com&lt;/a&gt;, paying about $12 per year. This is the only thing I’m paying for.&lt;/p&gt;
&lt;p&gt;Install required Python libraries including &lt;a href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; (the Python-based static site generator for creating personal blogs/websites) on your local laptop. E.g. &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; (see my &lt;code&gt;[requirements.txt](https://github.com/peacej/blog6/blob/main/requirements.txt)&lt;/code&gt;). I used Python 3.8.6 in a &lt;a href="https://conda.io/projects/conda/en/latest/user-guide/concepts/environments.html"&gt;conda environment&lt;/a&gt; but other setups should work too.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image_alt_text" src="https://miro.medium.com/max/2000/1*F-NLYAtzFjXLDYa4PLzXOw.png"&gt;Pelican logo&lt;/p&gt;
&lt;p&gt;Auto-convert any Medium articles you choose to Markdown files (which are compatible with Pelican, which will then auto-convert them to HTML/Javascript) using the &lt;code&gt;medium_to_markdown&lt;/code&gt; tool described at &lt;a href="https://willkoehrsen.github.io/writing/markdown/converting-medium-posts-to-markdown-for-your-blog/"&gt;https://willkoehrsen.github.io/writing/markdown/converting-medium-posts-to-markdown-for-your-blog /&lt;/a&gt; . I did &lt;a href="https://github.com/peacej/blog6/blob/main/medium_to_markdown.py"&gt;slightly tweak his code&lt;/a&gt; to e.g. filter out a few specific words. This doesn’t require any special access to your Medium account; it’s just scraping the text from the public internet.&lt;/p&gt;
&lt;p&gt;Push your code to a new Github repo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can host the website on &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages"&gt;Github Pages&lt;/a&gt; for free, up to 1 GB of storage (nothing beyond that even if you want to pay). If I ever need more than 1 GB, I might migrate to Heroku.&lt;/li&gt;
&lt;li&gt;You can &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site"&gt;use your own custom domain&lt;/a&gt; (in my case &lt;a href="https://jerrychi.com"&gt;jerrychi.com&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need a &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;main&lt;/code&gt; git branch for all the code and then a &lt;code&gt;gh-pages&lt;/code&gt; branch to store the actual website assets that are served when people visit your site. Thankfully one can just use a tool called &lt;code&gt;ghp-import&lt;/code&gt; to automate pushing the only the needed to &lt;code&gt;gh-pages&lt;/code&gt; branch. You can see &lt;a href="https://github.com/peacej/blog6/blob/main/buildpush.sh"&gt;how I use this tool&lt;/a&gt;. After pushing to github, usually changes are reflected in a few seconds on my website.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tip: style changes to CSS files etc. may require an “&lt;a href="https://gsuitetips.com/tips/chrome/chrome:-empty-cache-and-hard-reload/#:~:text=Normal%20Reload%3A%20Uses%20Cached%20Data,be%20re%2Ddownloaded%20as%20required."&gt;empty cache and hard reload&lt;/a&gt;” in Chrome to be visually reflected on the website due to caching.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican also supports add-ons, themes, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See the &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes repo&lt;/a&gt; for instructions on themes.&lt;/li&gt;
&lt;li&gt;I chose to use the &lt;a href="https://github.com/alexandrevicenzi/Flex/"&gt;Flex theme&lt;/a&gt; which includes many nifty features such a mobile-first responsive UI. I cloned this Flex repo directly rather than cloning from the &lt;code&gt;pelican-themes&lt;/code&gt; repo which pins Flex at an older version.&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;pelicanconf.py&lt;/code&gt; (the main configuration file) I simply set &lt;code&gt;PLUGINS = ["pelican.plugins.search"]&lt;/code&gt; and &lt;code&gt;STORK_VERSION = "1.5.0"&lt;/code&gt; to enable a search box on the left navigation bar. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I also edited the &lt;code&gt;pelican-templates/Flex/static/stylesheet/style.less&lt;/code&gt; file to customize the font style (my first time dealing with the &lt;a href="https://lesscss.org/"&gt;Less language&lt;/a&gt; but it was easy to edit).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it! Now you have a nice shiny new personal website~&lt;/p&gt;
&lt;p&gt;So, why did I choose Pelican? I also considered Nikola and Django:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nikola: the second-most popular Python static site generator after Pelican. I did initially try building with Nikola but got frustrated with the documentation being a bit unclearly worded and the lack of resources/answers when e.g. googling around for an issue. Pelican is more established and popular with more discussion/answers for potential issues.&lt;/li&gt;
&lt;li&gt;Django: the most popular Python web backend framework. I did take the &lt;a href="https://docs.djangoproject.com/en/4.1/intro/tutorial01/"&gt;Django official tutorial&lt;/a&gt;, which was enjoyable and extremely well-written. However, Django is much more complicated than Pelican (which is natural since Django is a general-purpose framework for creating any sort of webpage) and I’d likely end up combining Django with a frontend framework like React (meaning one more framework to learn). The complexity and work required was overkill for needs: a simple personal website. I’ll come back to learn Django+React if I need a much fancier site.&lt;/li&gt;
&lt;/ul&gt;</content><category term="web dev"></category><category term="web dev"></category><category term="blogging"></category><category term="Python"></category></entry></feed>